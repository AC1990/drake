% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/parallel_stages.R
\name{parallel_stages}
\alias{parallel_stages}
\title{Function parallel_stages}
\usage{
parallel_stages(config, from_scratch = FALSE)
}
\arguments{
\item{config}{An configuration list output by
\code{\link{make}()} or \code{\link{drake_config}()}.}

\item{from_scratch}{logical, whether to assume
that the next \code{\link{make}()} will run from scratch
so that all targets are attempted.}
}
\value{
A data frame of information spelling out how
targets are divided into parallelizable stages
(according to the \code{stage} column).
}
\description{
Get information on the parallelizable stages
of targets for a workflow.
}
\details{
Usually, \code{\link{make}()} divides the targets
and imports into parallelizable stages strictly according
to the columns in \code{\link{vis_drake_graph}()}.
However, if some targets are out of date, drake
looks ahead in the graph until it finds outdated targets
for the current stage. The \code{parallel_stages()} function
takes this behavior into account when it reports a data frame
of information on how targets and imports will be divided into
parallel stages during the next \code{\link{make}()}.
}
\examples{
\dontrun{
load_basic_example() # Load the basic example.
config <- drake_config(my_plan) # Get a configuration list.
# Parallel stages for the next make().
parallel_stages(config = config)
# Check the graph to see that the information agrees.
vis_drake_graph(config = config)
# Build the project.
config <- make_with_config(config) # or make(my_plan)
# Nothing to build in the next make().
parallel_stages(config = config)
# Change a dependency and notice how the stages change.
reg2 = function(d){
  d$x3 = d$x^3
  lm(y ~ x3, data = d)
}
parallel_stages(config = config)
}
}
\seealso{
\code{\link{make}}, \code{\link{make_with_config}}
}
